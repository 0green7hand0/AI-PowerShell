# Docker Compose configuration for AI PowerShell Assistant
version: '3.8'

services:
  # Main application service
  ai-powershell-assistant:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-powershell-assistant
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config:ro
      - ai-data:/app/data
      - ai-logs:/app/logs
      - ai-models:/app/models
      - /var/run/docker.sock:/var/run/docker.sock  # For sandbox execution
    environment:
      - POWERSHELL_ASSISTANT_LOG_LEVEL=INFO
      - POWERSHELL_ASSISTANT_HOST=0.0.0.0
      - POWERSHELL_ASSISTANT_PORT=8000
    networks:
      - ai-network
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - ai-network
    depends_on:
      - prometheus

  # Elasticsearch for log aggregation (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ai-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - ai-network
    profiles:
      - logging

  # Kibana for log visualization (optional)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ai-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - ai-network
    depends_on:
      - elasticsearch
    profiles:
      - logging

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-network
    depends_on:
      - ai-powershell-assistant
    profiles:
      - proxy

# Development override
  ai-powershell-assistant-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ai-powershell-assistant-dev
    restart: "no"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ai-dev-data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - POWERSHELL_ASSISTANT_LOG_LEVEL=DEBUG
      - POWERSHELL_ASSISTANT_HOST=0.0.0.0
      - POWERSHELL_ASSISTANT_PORT=8000
    networks:
      - ai-network
    profiles:
      - development
    command: ["python", "-m", "src.main", "--dev", "--reload"]

networks:
  ai-network:
    driver: bridge

volumes:
  ai-data:
    driver: local
  ai-logs:
    driver: local
  ai-models:
    driver: local
  ai-dev-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local