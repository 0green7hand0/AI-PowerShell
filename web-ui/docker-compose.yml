version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ai-powershell-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=http://backend:5000
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Backend service
  backend:
    build:
      context: ../
      dockerfile: web-ui/Dockerfile.backend
    container_name: ai-powershell-backend
    ports:
      - "5000:5000"
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - AUTH_ENABLED=${AUTH_ENABLED:-false}
      - CSRF_ENABLED=${CSRF_ENABLED:-true}
      - CACHE_TYPE=${CACHE_TYPE:-SimpleCache}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      - redis
    volumes:
      - ./backend/logs:/app/logs
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/api/health')"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Redis cache (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-powershell-redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
