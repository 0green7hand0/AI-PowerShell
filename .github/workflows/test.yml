name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget
        # Install PowerShell Core
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install PowerShell Core
        brew install --cask powershell

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # PowerShell is pre-installed on Windows runners
        echo "PowerShell already available"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Install Docker (for sandbox tests)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Docker is pre-installed on Ubuntu runners
        docker --version

    - name: Lint code
      run: |
        # Run code quality checks
        python -m flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan
      run: |
        # Run security checks
        python -m bandit -r src -f json -o bandit-report.json || true
        python -m safety check --json --output safety-report.json || true

    - name: Run unit tests
      run: |
        python src/run_all_tests.py --unit-only -v

    - name: Run integration tests
      run: |
        python src/run_all_tests.py --integration-only -v

    - name: Run security tests
      run: |
        python src/run_all_tests.py --security-only -v

    - name: Run cross-platform tests
      run: |
        python src/run_all_tests.py --cross-platform-only -v

    - name: Run performance tests (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        python src/run_all_tests.py --performance-only -v

    - name: Generate coverage report
      run: |
        python -m coverage run --source=src -m pytest src/ --tb=short
        python -m coverage xml
        python -m coverage html

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          tests.log
          bandit-report.json
          safety-report.json
          coverage.xml

    - name: Upload performance results
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          performance-*.json
          benchmark-*.json

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Install PowerShell Core
      run: |
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Run comprehensive test suite
      run: |
        python src/run_all_tests.py -v

    - name: Check test coverage threshold
      run: |
        python -m coverage run --source=src -m pytest src/ --tb=short
        python -m coverage report --fail-under=90

  security-audit:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep pip-audit

    - name: Run Bandit security scan
      run: |
        bandit -r src -f json -o bandit-report.json
        bandit -r src

    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
        semgrep --config=auto src/

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          pip-audit-report.json

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt

    - name: Install PowerShell Core
      run: |
        wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: Run performance benchmarks
      run: |
        python src/run_all_tests.py --performance-only -v

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmark-*.json
          performance-*.json